* ebf

Brainfuck language transpiler to Emacs Lisp

** Usage

The brainfuck language transpiler to Emacs Lisp consists of ~ebf~
macro which expands to the actual Emacs Lisp code. Here is the
signature of this macro:

#+BEGIN_SRC emacs-lisp

(ebf INPUT-CALLBACK OUTPUT-CALLBACK &rest INSTRUCTIONS)

#+END_SRC

~INPUT-CALLBACK~ is called on comma instruction and should have zero
arguments and return a number.

~OUTPUT-CALLBACK~ is called on dot instruction and should have one
argument of an integer type.

~INSTRUCTIONS~ is a list of symbols and vectors of symbols. Vectors
are accepted so you don't need to escape square brackets of your
brainfuck program. Symbols' names should be sequences of valid
brainfuck instructions except square brackets.

Evaluation of the macro expansion causes the brainfuck program
execution.

So the code

#+BEGIN_SRC emacs-lisp
(ebf input output \,+++[->+<].)
#+END_SRC

will be expanded to

#+BEGIN_SRC emacs-lisp
(let ((MEMORY75843 (make-vector 100 0))
      (POINTER75844 0)
      (INPUT75841 input)
      (OUTPUT75842 output))
  (aset MEMORY75843 POINTER75844 (funcall INPUT75841))
  (cl-incf (aref MEMORY75843 POINTER75844) 3)
  (while (not (zerop (aref MEMORY75843 POINTER75844)))
    (cl-decf (aref MEMORY75843 POINTER75844) 1)
    (cl-incf POINTER75844 1)
    (cl-incf (aref MEMORY75843 POINTER75844) 1)
    (cl-decf POINTER75844 1))
  (funcall OUTPUT75842 (aref MEMORY75843 POINTER75844)))
#+END_SRC

As you can see we have memory limited to 100 cells. But we are working
on that.

Here is the classical Hello World example with some output:

#+BEGIN_SRC emacs-lisp
(let ((result nil))
  (ebf nil #'(lambda (x) (push x result))
       ++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++
       .>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.
       ------.--------.>+.>.)
  (apply #'string (reverse result)));<- put cursor here and press C-x C-e
#+END_SRC

** Compiling ebf

`ebf` macro produces the code that doesn't depend on `ebf` module
itself. That means you can byte-compile your brainfuck programs so
they will not require `ebf` at runtime.

Check [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Compiling-Macros.html][Macros and Byte Compilation]] section of the official Emacs Lisp
manual on how to do that.

Basically we will need to wrap you `(require 'ebf)` with
`eval-when-compile` like

```
(eval-when-compile
 (require 'ebf))
```

** License

Copyright (C) 2015 Alexey Kutepov a.k.a rexim

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
